
package controllers;

import java.util.Collection;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import services.AnswerService;
import services.PollService;
import services.PollerService;
import services.QuestionService;
import domain.Answer;
import domain.Poller;
import domain.Question;

@Controller
@RequestMapping("/answer")
public class AnswerController extends AbstractController {

	//Services =======================================================================

	@Autowired
	private AnswerService	answerService;

	@Autowired
	private PollService		pollService;

	@Autowired
	private PollerService	pollerService;

	@Autowired
	private QuestionService	questionService;


	//Listing ========================================================================

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public ModelAndView list(@RequestParam int questionId) {
		ModelAndView result;
		Collection<Answer> answers;

		Poller poller = pollerService.findByPrincipal();

		try {
			Question question = questionService.findOne(questionId);

			if (question == null || poller.getId() != question.getPoll().getPoller().getId()) {

				result = new ModelAndView("redirect:/panic/misc.do");

			} else {

				answers = answerService.findByQuestion(questionId);

				long l = 10;
				Date actualDate = new Date(System.currentTimeMillis() - l);

				result = new ModelAndView("answer/list");
				result.addObject("answers", answers);
				result.addObject("poller", poller);
				result.addObject("question", question);
				result.addObject("poll", question.getPoll());
				result.addObject("actualDate", actualDate);
				result.addObject("requestURI", "answer/list.do");
			}
		} catch (Throwable oops) {
			result = new ModelAndView("redirect:/panic/misc.do");
		}

		return result;
	}

	//Creating
	// ===========================================================================

	//	@RequestMapping(value = "/create", method = RequestMethod.GET)
	//	public ModelAndView create(@RequestParam int questionId) {
	//		ModelAndView result;
	//
	//		Question question = questionService.findOne(questionId);
	//		Poller poller = pollerService.findByPrincipal();
	//
	//		long l = 10;
	//		Date actualDate = new Date(System.currentTimeMillis() - l);
	//
	//		try {
	//
	//			if (question.getPoll().getPoller().getId() != poller.getId() || question.getPoll().getEndActive().before(actualDate) && question.getPoll().getStartActive().after(actualDate) || question.getPoll().getEndActive().after(actualDate)
	//				&& question.getPoll().getStartActive().after(actualDate)) {
	//				result = new ModelAndView("redirect:/panic/misc.do");
	//			}
	//
	//			Answer answer = answerService.create(question); //Aquí me he quedado
	//			result = this.createEditModelAndView(answer);
	//
	//		} catch (Throwable oops) {
	//			result = new ModelAndView("redirect:/panic/misc.do");
	//		}
	//
	//		return result;
	//	}
	//
	//	//Edit ==============================================================================
	//
	//	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	//	public ModelAndView edit(@RequestParam int questionId) {
	//		ModelAndView result;
	//
	//		Poller poller = pollerService.findByPrincipal();
	//
	//		Question question = questionService.findOne(questionId);
	//
	//		long l = 10;
	//		Date actualDate = new Date(System.currentTimeMillis() - l);
	//
	//		try {
	//			Poll poll = pollService.findOne(question.getPoll().getId());
	//
	//			if (poll.getPoller().getId() != poller.getId() || poll.getEndActive().after(actualDate) && poll.getStartActive().before(actualDate) || poll.getEndActive().before(actualDate) && poll.getStartActive().before(actualDate)) {
	//
	//				result = new ModelAndView("redirect:/panic/misc.do");
	//
	//			} else {
	//
	//				result = this.createEditModelAndView(question);
	//
	//			}
	//		} catch (Throwable oops) {
	//			result = new ModelAndView("redirect:/panic/misc.do");
	//		}
	//
	//		return result;
	//	}
	//
	//	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	//	public ModelAndView save(@Valid Question questionPruned, BindingResult binding) {
	//		ModelAndView result;
	//
	//		Question question = questionService.reconstruct(questionPruned, binding);
	//
	//		if (binding.hasErrors()) {
	//			result = createEditModelAndView(question);
	//		} else {
	//			try {
	//
	//				Question questionSaved = questionService.save(question);
	//				result = new ModelAndView("redirect:/question/list.do?pollId=" + questionSaved.getPoll().getId());
	//
	//			} catch (Throwable oops) {
	//
	//				result = createEditModelAndView(question, "question.commit.error");
	//			}
	//		}
	//		return result;
	//	}
	//
	//	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "delete")
	//	public ModelAndView delete(Question questionPruned, BindingResult binding) {
	//		ModelAndView result;
	//
	//		Question question = questionService.findOne(questionPruned.getId());
	//
	//		try {
	//			questionService.delete(question);
	//
	//			result = new ModelAndView("redirect:/question/list.do?pollId=" + question.getPoll().getId());
	//		} catch (Throwable oops) {
	//			result = createEditModelAndView(question, "question.commit.error");
	//		}
	//		return result;
	//	}
	//
	//	//Ancillary methods
	//	// =======================================================================
	//
	//	protected ModelAndView createEditModelAndView(Question question) {
	//		ModelAndView result;
	//
	//		result = createEditModelAndView(question, null);
	//		return result;
	//	}
	//
	//	protected ModelAndView createEditModelAndView(Question question, String message) {
	//		ModelAndView result;
	//
	//		result = new ModelAndView("question/edit");
	//
	//		Poll poll = pollService.findOne(question.getPoll().getId());
	//
	//		long l = 10;
	//		Date actualDate = new Date(System.currentTimeMillis() - l);
	//
	//		result.addObject("message", message);
	//		result.addObject("poll", poll);
	//		result.addObject("question", question);
	//		result.addObject("actualDate", actualDate);
	//		result.addObject("requestURI", "question/edit.do");
	//
	//		return result;
	//	}

}
